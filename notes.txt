Inversion of control - 
  libraries: you have control. you call the library when you want to use it
  frameworks: framework has the control and calls your code when needed
    hollywood principle: don't call us, we'll call you

Declaritive vs Imperative Approach
  declaritive: You declare what you want to see, then React handles updating the DOM in a consistant way
      React is decalritive
  Imperative: You manipulate the DOM directly to create, insert, remove nodes and spell out every step yourself
Componet Based Approach
  encapsulates the UI into units called Componets
Plays well with other technologies
  makes no assumptions about the rest of your tech stack - focuses on the UI nad lets you decide the rest of the application architecture

JSX
------
App.js runs JSX

JSX is like a preprocessor for JS, similar to Sass for CSS
you can write your code one wa and then it gets complied to regular JS on the way to the browser
JSX syntax is very similar to HTML with a few differences:
  className instead of class
  htmlFor instead of for
  {} can be used to embed JS expressions
  when an element has no content you can write it as a self closing tag in JSX:
    <i className="fa fa-phone"></i>
            becomes
    <i className="fa fa-phone" />
many HTML attributes such as ID and href are the same

JS Import and Export
----------------------
import and export keywords allow files to share data with eachother

the shared data can be objects, primitives, and functions(including classes)

two kinds of export:
  default - only one per file
    a module is a JS file that contains an export
    two ways to write:
      export default App;
      export { App }
  named - many in a file


React Componets
------------------
  - reusable chuncks of code like functions for the specific purpose of rendering parts of the UI
  - units of UI - are "rendered" not called (ie: function call) to the view
  - brackets, Capitilazation are two dead giveaways of a react component
  - Easily compose the UI in a modular way
  - similar to bootstrap but written in JS - can make custom or use 3rd party

  Class Component
    definition:
    all class components are children of React's Component
    names muct be capitalized, just like regular classes
    constructors may or may not be required
    always a render() method with   a simple return statement inside
      return value can only be a single element (can contain nested elements), typically using JSX
      multi-line return statements need to be wrapped in parenthesis

    rendering:
    render using a self closing HTML tag wit the component's name (capitalized)

    Local State:
    data
    cannot be seen from other parts of the app 
    to pass data from componet to component pass as attribute

    Lifiting state up:



    class myComponent extends Component {

    }
  Functional Component





  Developer Tools
  profiler tab - auditing speed of a react application
  componets tabe:
    displays all the components
    where data is being held
    